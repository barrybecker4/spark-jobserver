# Template for a Spark Job Server configuration file
# When deployed these settings are loaded when job server starts
#
# Spark Cluster / Job Server configuration
spark {

  # client or cluster deployment
  submit.deployMode = "client"

  # Default # of CPUs for jobs to use for Spark standalone cluster
  job-number-cpus = 4

  jobserver {
    port = 8090

    context-per-jvm = false
    max-jobs-per-context = 16      # Number of jobs that can be run simultaneously per context
    context-creation-timeout = 20s
    short-timeout = 60s   # needed for fat jars
    dao-timeout = 17s

    # Note: JobFileDAO is deprecated from v0.7.0 because of issues in
    # production and will be removed in future, now defaults to H2 file.
    jobdao = spark.jobserver.io.JobSqlDAO

    filedao {
      rootdir = /tmp/spark-jobserver/filedao/data
    }

    datadao {
      # storage directory for files that are uploaded to the server
      # via POST/data commands
      rootdir = /tmp/spark-jobserver/upload
    }

    sqldao {
      slick-driver = slick.driver.MySQLDriver
      jdbc-driver = com.mysql.jdbc.Driver
      jdbc {
        url = "jdbc:mysql://localhost/spark_jobserver?createDatabaseIfNotExist=true&useSSL=false"
        user = "jobserver"
        password = "spark"
      }

      # DB connection pool settings
      dbcp {
        enabled = false
        maxactive = 20
        maxidle = 10
        initialsize = 10
      }
    }

    # When using chunked transfer encoding with scala Stream job results, this is the size of each chunk
    result-chunk-size = 1m
  }

  # Predefined Spark contexts
  # contexts {
  #   my-low-latency-context {
  #     num-cpu-cores = 1           # Number of cores to allocate.  Required.
  #     memory-per-node = 512m         # Executor memory per node, -Xmx style eg 512m, 1G, etc.
  #   }
  #   # define additional contexts here
  # }

  # Universal context configuration.  These settings can be overridden, see README.md
  context-settings {
    # spark.master will be passed to each job's JobContext
    # local[...], yarn, mesos://... or spark://...
    spark.master = "local[4]"

    num-cpu-cores = 2           # Number of cores to allocate.  Required.
    memory-per-node = 4G      # Executor memory per node, -Xmx style eg 512m, #1G, etc.
    spark.ui.port = 4040
    spark.sql.shuffle.partitions = 4
    spark.driver.maxResultSize = 1G
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    #spark.kryo.registrationRequired = true
    spark.kryoserializer.buffer.max = 256m
    spark.kryo.classesToRegister = "scala.collection.mutable.LinkedHashMap"
    spark.scheduler.mode = "FAIR"

    # in case spark distribution should be accessed from HDFS (as opposed to being installed on every mesos slave)
    # spark.executor.uri = "hdfs://namenode:8020/apps/spark/spark.tgz"

    # uris of jars to be loaded into the classpath for this context. Uris is a string list, or a string separated by commas ','
    # dependent-jar-uris = ["file:///some/path/present/in/each/mesos/slave/somepackage.jar"]

    # If you wish to pass any settings directly to the sparkConf as-is, add them here in passthrough,
    # such as hadoop connection settings that don't use the "spark." prefix
    passthrough {
      #es.nodes = "192.1.1.1"
    }
  }

  # This needs to match SPARK_HOME for cluster SparkContexts to be created successfully
  # home = "/home/spark/spark"
}

flyway.locations="db/mysql/migration"

spray.can.server {
  idle-timeout = 1200 s
  request-timeout = 900 s
  parsing.max-content-length = 400m
}

# Note that you can use this file to define settings not only for job server,
# but for your Spark jobs as well.  Spark job configuration merges with this configuration file as defaults.